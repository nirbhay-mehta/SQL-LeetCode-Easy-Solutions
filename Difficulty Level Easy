******************************************EASY SECTION*******************************************************
1) Product Sales Analysis 2
Table: Sales

+-------------+-------+
| Column Name | Type  |
+-------------+-------+
| sale_id     | int   |
| product_id  | int   |
| year        | int   |
| quantity    | int   |
| price       | int   |
+-------------+-------+
sale_id is the primary key of this table.
product_id is a foreign key to Product table.
Note that the price is per unit.
Table: Product

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| product_id   | int     |
| product_name | varchar |
+--------------+---------+
product_id is the primary key of this table.
 

Write an SQL query that reports the total quantity sold for every product id.

The query result format is in the following example:

Sales table:
+---------+------------+------+----------+-------+
| sale_id | product_id | year | quantity | price |
+---------+------------+------+----------+-------+ 
| 1       | 100        | 2008 | 10       | 5000  |
| 2       | 100        | 2009 | 12       | 5000  |
| 7       | 200        | 2011 | 15       | 9000  |
+---------+------------+------+----------+-------+

Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 100        | Nokia        |
| 200        | Apple        |
| 300        | Samsung      |
+------------+--------------+

Result table:
+--------------+----------------+
| product_id   | total_quantity |
+--------------+----------------+
| 100          | 22             |
| 200          | 15             |
+--------------+----------------+


SELECT product_id, SUM(quantity) as total_quantity 
FROM Sales
GROUP BY 1

2)  Product Sales Analysis I
Write an SQL query that reports all product names of the products in the Sales table along with their selling year and price.

Select product.product_name,sales.year,sales.price
FROM Product product
JOIN Sales sales
ON product.product_id = sales.product_id

3)  Game Play Analysis I
Write an SQL query that reports the first login date for each player.

SELECT player_id,MIN(event_date) as first_login
FROM Activity
GROUP BY 1

4) Big Countries
Write a SQL solution to output big countries' name, population and area.

SELECT name,population,area
FROM World
WHERE area >3000000 OR population>25000000

5) Shortest Distance in a Line
Write a query to find the shortest distance between two points in these points.

SELECT MIN(table1.x-table2.x) as shortest
FROM point table1
JOIN point table2
ON table1.x > table2.x

6) Actors and Directors Who Cooperated At Least Three Times
Write a SQL query for a report that provides the pairs (actor_id, director_id) where the actor have cooperated with the director at least 3 times.

SELECT ACTOR_ID, DIRECTOR_ID
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(*) > 2

7) Sales Analysis I
Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all.

with sub as(SELECT seller_id,
SUM(price) as p
FROM Sales
GROUP BY seller_id
)

SELECT t1.seller_id
FROM(
(SELECT *,
DENSE_RANK() OVER(ORDER BY sub.p DESC) as ranking
FROM sub)
) t1
WHERE t1.ranking =1

8) Swap Salary
Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values 
(i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.

UPDATE salary
SET sex = ( CASE WHEN sex ='f' THEN 'm'
           WHEN sex ='m' THEN 'f'
           ELSE NULL END
            );
 
 9) Find Customer Referee
 Write a query to return the list of customers NOT referred by the person with id '2'.
 
SELECT name
FROM customer
WHERE COALESCE(referee_id,0) <> 2

10) Customer Placing the Largest Number of Orders
Query the customer_number from the orders table for the customer who has placed the largest number of orders

SELECT sub.customer_number
FROM(
SELECT customer_number,COUNT(customer_number)
FROM orders
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1) sub

11) Not Boring Movies
Please write a SQL query to output movies with an odd numbered ID and a description that is not 'boring'. Order the result by rating.

SELECT id,movie,description,rating
FROM cinema
WHERE description <> 'boring' AND id%2 <> 0
ORDER BY rating DESC

12) Reported Posts
Write an SQL query that reports the number of posts reported yesterday for each report reason. Assume today is 2019-07-05.

SELECT extra as report_reason,COUNT(DISTINCT post_id) as report_count
FROM Actions
WHERE action ='report' AND action_date = '2019-07-04'
GROUP BY 1

13) Triangle Judgement
Could you help Tim by writing a query to judge whether these three sides can form a triangle, assuming table triangle holds the length of the three sides x, y and z.

SELECT x,y,z,
CASE 
WHEN x+y>z AND y+z>x AND x+z>y THEN 'Yes'
ELSE 'No' END AS 'triangle'
FROM triangle

14) Employee Bonus
Select all employee's name and bonus whose bonus is < 1000.

SELECT e.name,b.bonus
FROM Employee e
LEFT JOIN Bonus b
ON e.empId = b.empId 
where  b.bonus<1000 OR b.bonus IS NULL

15) Consecutive Available Seats
Several friends at a cinema ticket office would like to reserve consecutive available seats.
Can you help to query all the consecutive available seats order by the seat_id using the following cinema table?

with t1 as (Select seat_id,
free,
LAG(free) OVER(ORDER BY seat_id) as lagging,
LEAD(free) OVER(ORDER bY seat_id) as leading
FROM cinema)

SELECT t1.seat_id
FROM t1
WHERE (free =1 AND lagging =1) oR
(free =1 AND leading =1)



